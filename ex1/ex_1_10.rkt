#lang racket/base

(define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1) (A x (- y 1))))    
    )
)

(A 1 10)    
; (A 0 (A 1 9))
; (* 2 (A 1 9))
; (* 2 (A 0 (A 1 8)))
; (* 4 (A 1 8))
; (* 8 (A 1 7))
; (* 16 (A 1 6))
; (* 32 (A 1 5))
; (* 64 (A 1 4))
; (* 128 (A 1 3))
; (* 256 (A 1 2))
; (* 512 (A 1 1))
; (* 512 2)
; 1024

(A 2 4)
;(A 1 (A 2 3))
;(A 1 (A 1 (A 2 2)))
;(A 1 (A 1 (A 1 (A 2 1))))
;(A 1 (A 1 (A 1 2)))
;(A 1 (A 1 (A 0 (A 1 1))))
;(A 1 (A 1 4))
;(A 1 (A 0 (A 1 3)))
;(A 1 (A 0 (A 0  (A 1 2))))
;(A 1 (A 0 (A 0  (A 0 (A 1 1)))))
;(A 1 16)
;(* 2 (A 1 15))
;(* 4 (A 1 14))
;(* 8 (A 1 13))
;(* 16 (A 1 12))
;(* 32 (A 1 11))
;(* 64 (A 1 10))
;(* 128 (A 1 9))
;(* 256 (A 1 8))
;(* 512 (A 1 7))
;(* 1024 (A 1 6))
;(* 2048 (A 1 5))
;(* 4096 (A 1 4))
;(* 8192 (A 1 3))
;(* 16384 (A 1 2))
;(* 32768 (A 1 1))
;65536

(A 3 3)
;(A 2 (A 3 2))
;(A 2 (A 2 (A 3 1)))
;(A 2 (A 2 2))
;(A 2 (A 1 (A 2 1)))
;(A 2 (A 1 2))
;(A 2 (A 0 (A 1 1)))
;(A 2 4)
;65536

;f(n) = 2
;g(n) = 2^n
;h(n) = 2^^(n-1)